Docker is a popular tool for building, running, testing, and deploying distributed applications that are based on Linux containers. It allows you to package and run applications in a loosely isolated environment called containers, which are lightweight and contain everything needed to run the applications. Docker can be used on AWS EC2 instances, which are virtual servers that provide scalable computing power.
Step 1: Install Docker on EC2 Instance
The first step is to install docker on your EC2 instance. To do this, you will need to connect to your instance using SSH and run some commands. Here are the steps:
Connect to your EC2 instance using SSH. You can use the following command, replacing <your-instance-ip> with your instance’s public IPv4 address and <your-key-pair.pem> with your key pair file name:
ssh -i <your-key-pair.pem> ec2-user@<your-instance-ip>
2. Update the installed packages and package cache on your instance. This will ensure that you have the latest versions of the software. You can use the following command:
sudo yum update -y
3. Install the most recent Docker Engine package. This will install docker and its dependencies on your instance. You can use the following command:
sudo amazon-linux-extras install docker
4. Start the docker service. This will enable docker to run on your instance. You can use the following command:
sudo service docker start
5. Add the ec2-user to the docker group so you can execute docker commands without using sudo. This will make it easier and safer to use docker on your instance. You can use the following command:
sudo usermod -a -G docker ec2-user
6. Log out and log back in again to pick up the new docker group permissions. You can accomplish this by closing your current SSH terminal window and reconnecting to your instance in a new one. Your new SSH session will have the appropriate docker group permissions.
7. Verify that the ec2-user can run docker commands without sudo. You can use the following command, which will print the docker version and other information:
docker info
Step 2: Create and Run a Docker Container
The next step is to create and run a docker container on your EC2 instance. A docker container is an instance of a docker image, which is a template that contains the application code and its dependencies. To create a docker image, you will need to write a Dockerfile, which is a text file that specifies the instructions for building the image. In this example, we will create a Dockerfile that runs the Ubuntu image, installs packages for the Apache web server, and displays “Hello World!” content to the web server’s index root. Here are the steps:
Create a directory for your Dockerfile and change into it. You can use the following commands:
mkdir docker-app cd docker-app
2. Create a Dockerfile using your preferred text editor. You can use the following command to open the file with the nano editor:
nano Dockerfile
3. Write the following content to the Dockerfile and save it. This will instruct docker to perform the following actions:
# Use Ubuntu as the base image
FROM ubuntu

# Update packages and install Apache
RUN apt-get update && apt-get install -y apache2

# Copy index.html to the web server's index root
COPY index.html /var/www/html/

# Expose port 80
EXPOSE 80

# Run Apache in the foreground
CMD ["apache2ctl", "-D", "FOREGROUND"]
4. Create a file named index.html in the same directory as your Dockerfile and write the following content to it. This will be the content that the web server will display.
<html>
<head>
    <title>Docker App</title>
</head>
<body>
    <h1>Hello World!</h1>
    <p>This is a docker app running on an EC2 instance.</p>
</body>
</html>
5. Build your docker image using the Dockerfile. You can use the following command, replacing <your-image-name> with a name of your choice. This will create a docker image with the name and tag that you specify.
docker build -t <your-image-name>:latest .
6. Run your docker container using the image that you built. You can use the following command, replacing <your-image-name> with the name that you used in the previous step. This will create and start a docker container with the image and name that you specify. It will also map port 80 of the container to port 80 of the host, which will allow you to access the web server from outside the container.
docker run -d -p 80:80 --name <your-container-name> <your-image-name>:latest
Step 3: Test the Container
The final step is to test the container that you created and ran on your EC2 instance. To do this, you will need to access the container’s IP address and open the web browser. Here are the steps:
Get the container’s IP address. You can use the following command, replacing <your-container-name> with the name that you used in the previous step. This will print the IP address of the container.docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <your-container-name>
Open your web browser and enter the container’s IP address in the address bar. You should see the “Hello World!” message and the content that you wrote in the index.html file.ConclusionIn this article, we have shown you how to install and run docker containers on Amazon EC2 instances. We have also demonstrated how to create a Dockerfile, build an image, and run a container with the Ubuntu image and Apache web server. You can use this as a starting point for creating and running your own docker applications on AWS. Here are some tips and best practices to keep in mind:
Use the official docker images from the [Docker Hub] as the base images for your images. They are maintained by the docker community and have the latest security patches and updates.
Use the .dockerignore file to exclude files and directories that are not needed for building your images. This will reduce the size of your images and speed up the build process.
Use the --rm flag when running docker containers to automatically remove them whenThank you for reading!
